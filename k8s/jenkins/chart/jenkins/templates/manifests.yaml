---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ .Values.jenkins.persistence.storageClassName }}
provisioner: kubernetes.io/gce-pd
reclaimPolicy: {{ .Values.jenkins.persistence.reclaimPolicy }}
volumeBindingMode: Immediate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-jenkins
  labels: &JenkinsLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: jenkins-master
spec:
  replicas: 1
  selector:
    matchLabels: *JenkinsLabels
  serviceName: {{ .Release.Name }}-jenkins-ui
  template:
    metadata:
      labels: *JenkinsLabels
    spec:
      {{- if .Values.gcp.use_nodepool }}
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ .Values.gcp.nodepool_name }}
      {{- end }}
      serviceAccountName: "{{ .Values.jenkins.serviceAccount }}"
      initContainers:
        - name: volume-permissions-fix
          image: "{{ .Values.jenkins.image.repo }}:{{ .Values.jenkins.image.tag }}"
          command: ["sh", "-c", "chown 1000:1000 /var/jenkins_home"]
          securityContext:
            runAsUser: 0
          volumeMounts:
          - name: {{ .Release.Name }}-jenkins-pvc
            mountPath: /var/jenkins_home
      containers:
      - name: jenkins-master
        image: "{{ .Values.jenkins.image.repo }}:{{ .Values.jenkins.image.tag }}"
        command: ["sh", "-c", "/usr/local/bin/install-plugins.sh{{ range .Values.jenkins.plugins }} {{ . }}{{ end }} && cp /tmp/jenkins.yaml /var/jenkins_home/jenkins.yaml && /usr/local/bin/jenkins.sh"]
        ports:
        - containerPort: 8080
        - containerPort: 50000
        volumeMounts:
        - name: {{ .Release.Name }}-jenkins-pvc
          mountPath: /var/jenkins_home
        - name: {{ .Release.Name }}-jenkins-casc-yaml
          mountPath: /tmp/jenkins.yaml
          subPath: jenkins.yaml
        livenessProbe:
          httpGet:
            path: /login
            port: 8080
          periodSeconds: 10
          initialDelaySeconds: 30
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        env:
        - name: JENKINS_OPTS
          value: ''
        - name: JAVA_OPTS
          value: "-Xmx1800m -Djenkins.install.runSetupWizard={{ .Values.jenkins.runSetupWizard }}"
        - name: INSTALL_MONITORING
          value: 'true'
        - name: TZ
          value: "{{ .Values.timezone }}"
        resources:
          limits:
            memory: 2.0Gi
          requests:
            cpu: 100m
            memory: 2.0Gi
      volumes:
      - configMap:
          defaultMode: 420
          name: {{ .Release.Name }}-jenkins-casc-yaml
        name: {{ .Release.Name }}-jenkins-casc-yaml
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-jenkins-pvc
      labels: *JenkinsLabels
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: {{ .Values.jenkins.persistence.storageClassName }}
      resources:
        requests:
          storage: {{ .Values.jenkins.persistence.size }}
---
apiVersion: v1
kind: Service

metadata:
  name: {{ .Release.Name }}-jenkins-ui
  labels: &JenkinsLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: jenkins-master
  annotations:
    cloud.google.com/backend-config: '{"ports": {"ui":"{{ .Release.Name }}-backendconfig"}}'
spec:
  type: NodePort
  selector: *JenkinsLabels
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: ui
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-jenkins-agents-connector
  labels: &JenkinsLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: jenkins-master
spec:
  selector: *JenkinsLabels
  ports:
    - protocol: TCP
      port: 50000
      targetPort: 50000
      name: agents-connector
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-tls
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: jenkins-master
data:
  tls.key: |
{{ .Values.tls.base64EncodedPrivateKey | indent 4 }}
  tls.crt: |
{{ .Values.tls.base64EncodedCertificate | indent 4 }}
type: kubernetes.io/tls
{{ if .Values.gcp.use_ssl_policy }}
---
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: {{ .Values.gcp.ssl_policy_name }}
spec:
  sslPolicy: {{ .Values.gcp.ssl_policy_name }}
{{ end }}
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: {{ .Release.Name }}-backendconfig
spec:
  healthCheck:
    checkIntervalSec: 15
    timeoutSec: 1
    port: 8080
    type: HTTP
    requestPath: /login
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-jenkins-ui
  annotations:
    kubernetes.io/ingress.allow-http: "false"
  {{- if .Values.gcp.use_global_static_ip }}
    kubernetes.io/ingress.global-static-ip-name: {{ .Values.gcp.global_static_ip_name }}
  {{- end }}
  {{- if .Values.gcp.use_ssl_policy }}
    networking.gke.io/v1beta1.FrontendConfig: {{ .Values.gcp.ssl_policy_name }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: jenkins-master
spec:
  tls:
  - secretName: {{ .Release.Name }}-tls
  backend:
    serviceName: {{ .Release.Name }}-jenkins-ui
    servicePort: 8080
